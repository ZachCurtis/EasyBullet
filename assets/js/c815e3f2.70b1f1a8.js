"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[360],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=l.createContext({}),u=function(e){var t=l.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return l.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},h=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(a),h=n,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||r;return a?l.createElement(m,o(o({ref:t},c),{},{components:a})):l.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:n,o[1]=i;for(var u=2;u<r;u++)o[u]=a[u];return l.createElement.apply(null,o)}return l.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5662:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var l=a(7462),n=(a(7294),a(3905));const r={sidebar_position:1},o="Simplest Usage Example",i={unversionedId:"guides/simpleUsage",id:"guides/simpleUsage",title:"Simplest Usage Example",description:"This is the simplest possible usage example of EasyBullet. This won't include any of the settings and extra methods.",source:"@site/docs/guides/simpleUsage.md",sourceDirName:"guides",slug:"/guides/simpleUsage",permalink:"/EasyBullet/docs/guides/simpleUsage",draft:!1,editUrl:"https://github.com/ZachCurtis/EasyBullet/docs/docs/guides/simpleUsage.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Guides",permalink:"/EasyBullet/docs/category/guides"},next:{title:"API",permalink:"/EasyBullet/docs/category/api"}},s={},u=[{value:"Construct the library",id:"construct-the-library",level:2},{value:"Bind to the BulletHitHumanoid event on the server",id:"bind-to-the-bullethithumanoid-event-on-the-server",level:2},{value:"Handle user input to fire a bullet",id:"handle-user-input-to-fire-a-bullet",level:2},{value:"Full example",id:"full-example",level:2}],c={toc:u},d="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,l.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"simplest-usage-example"},"Simplest Usage Example"),(0,n.kt)("p",null,"This is the simplest possible usage example of EasyBullet. This won't include any of the settings and extra methods."),(0,n.kt)("h2",{id:"construct-the-library"},"Construct the library"),(0,n.kt)("p",null,"First step is to construct EasyBullet on the server and client. We aren't using any settings in this example, so nothing needs to be passed to the constructors. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'-- Server Script\nlocal EasyBullet = require(game:GetService("ReplicatedStorage"):WaitForChild("EasyBullet"))\n\nlocal easyBullet = EasyBullet.new()\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'--- Client LocalScript\nlocal EasyBullet = require(game:GetService("ReplicatedStorage"):WaitForChild("EasyBullet"))\n\nlocal easyBullet = EasyBullet.new()\n')),(0,n.kt)("p",null,"From now on, whenever we're interacting with EasyBullet we'll use the constructed object referenced by the ",(0,n.kt)("inlineCode",{parentName:"p"},"easyBullet")," variable"),(0,n.kt)("h2",{id:"bind-to-the-bullethithumanoid-event-on-the-server"},"Bind to the BulletHitHumanoid event on the server"),(0,n.kt)("p",null,"We'll use the ",(0,n.kt)("inlineCode",{parentName:"p"},"easyBullet.BulletHitHumanoid")," signal to deal damage whenever a bullet hits a part belonging to a humanoid character."),(0,n.kt)("p",null,"Dealing damage is always something you want to do server authoritatively, so we'll connect to the event in the Server Script"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'--- Server Script\nlocal EasyBullet = require(game:GetService("ReplicatedStorage"):WaitForChild("EasyBullet"))\n\nlocal easyBullet = EasyBullet.new()\n\n-- Bind to the BulletHitHumanoid signal\neasyBullet.BulletHitHumanoid:Connect(function(shootingPlayer: Player?, raycastResult: RaycastResult, hitHumanoid: Humanoid)\n\n    -- We\'ll use the shootingPlayer parameter to filter out damaging the shooting player\n    if shootingPlayer.Character and shootingPlayer.Character:IsAncestorOf(hitHumanoid) then\n        -- early exit\n        return\n    end\n\n    -- Deal damage to any humanoid that doesn\'t belong to the shooting player\n    hitHumanoid:TakeDamage(15)\nend)\n')),(0,n.kt)("h2",{id:"handle-user-input-to-fire-a-bullet"},"Handle user input to fire a bullet"),(0,n.kt)("p",null,"We need a way for our player to tell EasyBullet to fire a bullet. For the sake of simplicity, we'll use the old PlayerMouse to solve for aiming the bullet and handle the click event, and use the HumanoidRootPart to find the barrel position."),(0,n.kt)("p",null,"The FireBullet() method takes in 3 arguments: The position of the barrel, the velocity of the bullet, and an optional settings override table to use for just this bullet. We're going to ignore the third argument and just worry about the barrel position and bullet velocity for this example. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'-- Client LocalScript\nlocal Players = game:GetService("Players")\nlocal Player = Players.LocalPlayer\nlocal Character = Player.Character or Player.CharacterAdded:Wait()\nlocal HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")\nlocal Mouse = Player:GetMouse()\n\nlocal EasyBullet = require(game:GetService("ReplicatedStorage"):WaitForChild("EasyBullet"))\n\nlocal easyBullet = EasyBullet.new()\n\n-- First let\'s make a helper function to return a barrel CFrame slightly in front of our HumanoidRootPart\nlocal function getBarrelCFrame()\n    return HumanoidRootPart.CFrame * CFrame.new(0, 0, -2)\nend\n\n-- Handle the mouse clicking to fire the bullet\nMouse.Button1Down:Connect(function()\n\n    -- We call the FireBullet() method every time we want to fire a bullet.\n    -- It takes a barrel position, and a bullet velocity. Both are Vector3\'s.\n\n    -- Use our helper function from above to get the barrel position\n    local barrelPos = getBarrelCFrame().Position\n\n    -- Find the direction of the velocity vector by creating a new vector from the barrelPos to the Mouse.Hit.Position\n    local direction = Mouse.Hit.Position - barrelPos\n\n    -- Scale the direction\'s Unit vector by our desired bullet velocity\n    local velocity = direction.Unit * 85\n\n    -- Call the FireBullet() method\n    easyBullet:FireBullet(barrelPos, velocity)\nend)\n')),(0,n.kt)("h2",{id:"full-example"},"Full example"),(0,n.kt)("p",null,"And it's as easy as that! The full scripts from our steps above are as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'--- Server Script\nlocal EasyBullet = require(game:GetService("ReplicatedStorage"):WaitForChild("EasyBullet"))\n\nlocal easyBullet = EasyBullet.new()\n\neasyBullet.BulletHitHumanoid:Connect(function(shootingPlayer: Player?, raycastResult: RaycastResult, hitHumanoid: Humanoid)\n    if shootingPlayer.Character and shootingPlayer.Character:IsAncestorOf(hitHumanoid) then\n        return\n    end\n\n    hitHumanoid:TakeDamage(15)\nend)\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'-- Client LocalScript\nlocal Players = game:GetService("Players")\nlocal Player = Players.LocalPlayer\nlocal Character = Player.Character or Player.CharacterAdded:Wait()\nlocal HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")\nlocal Mouse = Player:GetMouse()\n\nlocal EasyBullet = require(game:GetService("ReplicatedStorage"):WaitForChild("EasyBullet"))\n\nlocal easyBullet = EasyBullet.new()\n\nlocal function getBarrelCFrame()\n    return HumanoidRootPart.CFrame * CFrame.new(0, 0, -2)\nend\n\nMouse.Button1Down:Connect(function()\n    local barrelPos = getBarrelCFrame().Position\n\n    local direction = Mouse.Hit.Position - barrelPos\n\n    local velocity = direction.Unit * 85\n\n    easyBullet:FireBullet(barrelPos, velocity)\nend)\n')))}p.isMDXComponent=!0}}]);