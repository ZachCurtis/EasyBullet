<roblox version="4">
  <Item class="ModuleScript" referent="0">
    <Properties>
      <string name="Name">EasyBullet</string>
      <string name="Source">--!strict
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local Bullet = require(script:WaitForChild("Bullet"))
local Signal = require(script:WaitForChild("Signal"))

type EasyBulletProps = {
	EasyBulletSettings: Bullet.EasyBulletSettings,
	BulletHit: Signal.Signal&lt;Player?, RaycastResult>,
	BulletHitHumanoid: Signal.Signal&lt;Player?, RaycastResult, boolean | Humanoid>,
	BulletUpdated: Signal.Signal&lt;Vector3, Vector3>,
	Bullets: {[number]: Bullet.Bullet},
	FiredRemote: RemoteEvent?,
	CustomCastCallback: (Player?, Vector3, Vector3, number) -> ()?
}

type EasyBulletMethods = {
	FireBullet: (self: EasyBullet, barrelPosition: Vector3, bulletVelocity: Vector3, easyBulletSettings: Bullet.EasyBulletSettings?) -> (),
	BindCustomCast: (self: EasyBullet, callback: Bullet.CastCallback) -> (),
	_fireBullet: (self: EasyBullet, shootingPlayer: Player?, barrelPos: Vector3, velocity: Vector3, ping: number, easyBulletSettings: Bullet.EasyBulletSettings?) -> (),
	_bindEvents: () -> (),

}

local function overrideDefaults(newEasyBulletSettings: Bullet.EasyBulletSettings | {})
	local defaultSettings = {
		Gravity = true,
		RenderBullet = true,
		BulletColor = Color3.new(0.945098, 0.490196, 0.062745),
		BulletThickness = .1,
		FilterList = {},
		FilterType = Enum.RaycastFilterType.Exclude
	}

	for key, value in pairs(newEasyBulletSettings) do
		if defaultSettings[key] == nil then
			warn(`{key} does not exist in type EasyBulletSettings`)
			continue
		end

		defaultSettings[key] = value
	end

	return defaultSettings
end

local constructedEasyBullet

local EasyBullet = {}
EasyBullet.__index = EasyBullet

export type EasyBullet = typeof(setmetatable({} :: EasyBulletProps,  EasyBullet))

function EasyBullet.new(easyBulletSettings: Bullet.EasyBulletSettings?)
	if constructedEasyBullet then
		return constructedEasyBullet
	end

	local self = setmetatable({} :: EasyBulletProps, EasyBullet)

	self.EasyBulletSettings = overrideDefaults(easyBulletSettings or {})

	self.BulletHit = Signal.new()
	self.BulletHitHumanoid = Signal.new()
	self.BulletUpdated = Signal.new()

	self.Bullets = {} :: {[number]: Bullet.Bullet}

	self.FiredRemote = nil
	self.CustomCastCallback = nil

	self:_bindEvents()

	constructedEasyBullet = self

	return self
end

function EasyBullet:FireBullet(barrelPosition: Vector3, bulletVelocity: Vector3, easyBulletSettings: Bullet.EasyBulletSettings?)
	easyBulletSettings = overrideDefaults(easyBulletSettings or {})

	-- Server; only used for non player bullets.
	if RunService:IsServer() then
		for _, v in ipairs(Players:GetPlayers()) do
			local thisPing = v:GetNetworkPing()
			self.FiredRemote:FireClient(v, nil, barrelPosition, bulletVelocity, thisPing, easyBulletSettings)
		end

		self:_fireBullet(nil, barrelPosition, bulletVelocity, 0, easyBulletSettings)
	-- Client
	elseif RunService:IsClient() then
		if not self.FiredRemote then
			warn("EasyBullet Remote Event doesn't exist. Did you forget to call EasyBullet.new() on the server?")
			return
		end

		self.FiredRemote:FireServer(barrelPosition, bulletVelocity)

		self:_fireBullet(Players.LocalPlayer, barrelPosition, bulletVelocity, 0, easyBulletSettings)
	end
end

function EasyBullet:BindCustomCast(callback: Bullet.CastCallback)
	self.CustomCastCallback = callback
end

function EasyBullet:_destroyBullet(bullet: Bullet.Bullet)
	for i, v: Bullet.Bullet in ipairs(self.Bullets) do
		if v == bullet then
			table.remove(self.Bullets, i)
			break
		end
	end

	bullet:Destroy()
end

function EasyBullet._fireBullet(self: EasyBullet, shootingPlayer: Player?, barrelPos: Vector3, velocity: Vector3, ping: number, easyBulletSettings: Bullet.EasyBulletSettings?)
	local bullet = Bullet.new(shootingPlayer, barrelPos, velocity, easyBulletSettings or self.EasyBulletSettings)
		
		local hitConnection, belowFallenParts

		hitConnection = bullet.BulletHit:Connect(function(rayResult: RaycastResult, hitHumanoid: Humanoid | boolean)
			self.BulletHit:Fire(shootingPlayer, rayResult)

			if hitHumanoid then
				self.BulletHitHumanoid:Fire(shootingPlayer, rayResult, hitHumanoid)
			end

			hitConnection:Disconnect()
			belowFallenParts:Disconnect()

			self:_destroyBullet(bullet)
		end)

		belowFallenParts = bullet.BelowFallenParts:Connect(function()
			hitConnection:Disconnect()
			belowFallenParts:Disconnect()

			self:_destroyBullet(bullet)
		end)

		bullet:Start(ping)

		table.insert(self.Bullets, bullet)
end

function EasyBullet:_bindEvents()
	-- Server
	if RunService:IsServer() then
		local firedRemote = ReplicatedStorage:FindFirstChild("EasyBulletFired") :: RemoteEvent

		if not firedRemote then
			self.FiredRemote = Instance.new("RemoteEvent")

			if self.FiredRemote then
				self.FiredRemote.Name = "EasyBulletFired"
				self.FiredRemote.Parent = ReplicatedStorage
			end
		else
			self.FiredRemote = firedRemote
		end

		if not self.FiredRemote then
			return
		end

		self.FiredRemote.OnServerEvent:Connect(function(player: Player, barrelPos: Vector3, velocity: Vector3)
			if typeof(barrelPos) ~= "Vector3" then
				warn(`{player.Name} passed a malformed barrelPosition type to EasyBulletFired RemoteEvent\nExpected: Vector3, got: {typeof(barrelPos)}`)
				return
			end

			if typeof(velocity) ~= "Vector3" then
				warn(`{player.Name} passed a malformed velocity type to EasyBulletFired RemoteEvent\nExpected: Vector3, got: {typeof(velocity)}`)
				return
			end

			local ping = player:GetNetworkPing()

			for _, v in ipairs(Players:GetPlayers()) do
				if v == player then continue end
				
				local thisPing = v:GetNetworkPing()

				self.FiredRemote:FireClient(v, player, barrelPos, velocity, ping + thisPing)
			end

			self:_fireBullet(player, barrelPos, velocity, ping)
		end)

	-- Client
	elseif RunService:IsClient() then
		self.FiredRemote = ReplicatedStorage:WaitForChild("EasyBulletFired") :: RemoteEvent

		if not self.FiredRemote then
			warn("No RemoteEvent named 'EasyBulletFired' found as a child of ReplicatedStorage")
			return
		end

		self.FiredRemote.OnClientEvent:Connect(function(shootingPlayer: Player, barrelPos: Vector3, velocity: Vector3, accumulatedPing: number, easyBulletSettings: Bullet.EasyBulletSettings)
			if shootingPlayer == Players.LocalPlayer then
				return
			end
			
			self:_fireBullet(shootingPlayer, barrelPos, velocity, accumulatedPing, easyBulletSettings)
		end)
	end

	-- Both
	RunService.Heartbeat:Connect(function()
		for _, bullet: Bullet.Bullet in ipairs(self.Bullets) do
			local lastPosition, currentPosition = bullet:Update(self.CustomCastCallback)

			-- Update returns nil when bullet drops below workspace.FallenPartsDestroyHeight
			if lastPosition and currentPosition then
				self.BulletUpdated:Fire(lastPosition, currentPosition)
			end
		end
	end)
end

return EasyBullet</string>
    </Properties>
    <Item class="ModuleScript" referent="1">
      <Properties>
        <string name="Name">Bullet</string>
        <string name="Source">--!strict
local RunService = game:GetService("RunService")

local kinematic = require(script:WaitForChild("kinematic"))
local BulletDraw = require(script:WaitForChild("BulletDraw"))
local Signal = require(script.Parent:WaitForChild("Signal"))

export type CastCallback = (shooter: Player?, pos0: Vector3, pos1: Vector3, elapsedTime: number) -> RaycastResult?

export type EasyBulletSettings = {
	Gravity: boolean,
	RenderBullet: boolean,
	BulletColor: Color3,
	BulletThickness: number,
	FilterList: {[number]: Instance},
	FilterType: Enum.RaycastFilterType
}

type BulletProps = {
    Shooter: Player?,
    BarrelPosition: Vector3,
    Velocity: Vector3,
    EasyBulletSettings: EasyBulletSettings,
    RayParams: RaycastParams,
    BulletHit: Signal.Signal&lt;RaycastResult, boolean | Humanoid>,
    BelowFallenParts: Signal.Signal&lt;nil>,
    StartTime: number,
    _bulletDraw: BulletDraw.BulletDraw?,
    _lastPosition: Vector3,
}

local function raycast(v0: Vector3, v1: Vector3, rayparams: RaycastParams)
    local diff = v1 - v0

    return workspace:Raycast(v0, diff, rayparams)
end

local function recursiveHumanoidCheck(instance: Instance): boolean | Humanoid
    local parentModel = instance:FindFirstAncestorOfClass("Model")

    if (not parentModel) or parentModel:IsA("WorldRoot") then
        return false
    end

    local childHumanoid = parentModel:FindFirstChildOfClass("Humanoid")

    if childHumanoid then
        return childHumanoid
    else
        return recursiveHumanoidCheck(parentModel)
    end
end

local Bullet = {}
Bullet.__index = Bullet

export type Bullet = typeof(setmetatable({} :: BulletProps, Bullet))


function Bullet.new(shootingPlayer: Player?, barrelPosition: Vector3, velocity: Vector3, easyBulletSettings: EasyBulletSettings)
    local self = setmetatable({} :: BulletProps, Bullet)

    self.Shooter = shootingPlayer
    
    self.BarrelPosition = barrelPosition
    self.Velocity = velocity
    self.EasyBulletSettings = easyBulletSettings

    self.RayParams = RaycastParams.new()
    self.RayParams.FilterDescendantsInstances = easyBulletSettings.FilterList or {}
    self.RayParams.FilterType = easyBulletSettings.FilterType or Enum.RaycastFilterType.Exclude
    
    if RunService:IsClient() and easyBulletSettings.RenderBullet then
        self._bulletDraw = BulletDraw.new(easyBulletSettings.BulletColor, easyBulletSettings.BulletThickness)
    end
    
    self._lastPosition = barrelPosition
    self.StartTime = 0

    self.BulletHit = Signal.new()
    self.BelowFallenParts = Signal.new()

    return self
end

function Bullet:Start(ping: number?)
    self.StartTime = os.clock()

    if ping then 
        self.StartTime -= ping
    end
end

function Bullet.Update(self: Bullet, castCallback: CastCallback?): (Vector3?, Vector3?)
    local lastPosition = self._lastPosition
    local currentPosition, elapsedTime = self:_getCurrentPositionAndLifetime()

    if currentPosition.Y &lt;= workspace.FallenPartsDestroyHeight then
        self.BelowFallenParts:Fire()
        return
    end

    local rayResult

    if castCallback then
        rayResult = castCallback(self.Shooter, lastPosition, currentPosition, elapsedTime)
    else
        rayResult = raycast(lastPosition, currentPosition, self.RayParams)
    end
    
    self:_handleRayResult(rayResult)

    if self._bulletDraw then
        self._bulletDraw:Draw(lastPosition, currentPosition)
    end

    self._lastPosition = currentPosition

    return lastPosition, currentPosition
end

function Bullet.Destroy(self: Bullet)
    if self._bulletDraw then
        self._bulletDraw:Destroy()
        self._bulletDraw = nil
    end

    self.BulletHit:Destroy()
    self.BelowFallenParts:Destroy()
end

function Bullet._getCurrentPositionAndLifetime(self: Bullet): (Vector3, number)
    local currentTime = os.clock()
    local elapsedTime = currentTime - self.StartTime

    local acceleration = self.EasyBulletSettings.Gravity and Vector3.new(0, -workspace.Gravity, 0) or Vector3.zero

    local currentDisplacement = kinematic(self.Velocity, acceleration, elapsedTime)
    local currentPosition = self.BarrelPosition + currentDisplacement

    return currentPosition, elapsedTime
end

function Bullet:_handleRayResult(raycastResult: RaycastResult?)
    if not raycastResult then return end

    local hitHumanoid = recursiveHumanoidCheck(raycastResult.Instance)

    self.BulletHit:Fire(raycastResult, hitHumanoid)
end


return Bullet</string>
      </Properties>
      <Item class="ModuleScript" referent="2">
        <Properties>
          <string name="Name">BulletDraw</string>
          <string name="Source">--!strict
local USE_PART_FPS = 45 -- will use a part for bullets above this fps

local RunService = game:GetService("RunService")

local ClientFPS = 1/RunService.Heartbeat:Wait()

if RunService:IsClient() then
    RunService.Heartbeat:Connect(function(dt)
        ClientFPS = 1 / dt 
    end)
end

local bulletCache: {[number]: Part | CylinderHandleAdornment} = {}

local function createBulletPart(addToCache: boolean): (Part | CylinderHandleAdornment)?
    local newBulletInstance: Part | CylinderHandleAdornment

    if RunService:IsClient() then
        if ClientFPS >= USE_PART_FPS then
            newBulletInstance = Instance.new("Part") :: Part

            if not newBulletInstance:IsA("Part") then return end
            
            newBulletInstance.Anchored = true
            newBulletInstance.CanCollide = false
            newBulletInstance.CanTouch = false
            newBulletInstance.CanQuery = false
            newBulletInstance.Material = Enum.Material.Neon
        else
            newBulletInstance = Instance.new("CylinderHandleAdornment")
        end
    else
        newBulletInstance = Instance.new("CylinderHandleAdornment")
    end

    if addToCache then
        table.insert(bulletCache, newBulletInstance)
    end

    return newBulletInstance
end

for _ = 1, 20 do
    createBulletPart(true)
end

local function getBulletPart(): Part | CylinderHandleAdornment | nil
    if #bulletCache == 0 then
        return createBulletPart(false)
    else
        local bulletPart = bulletCache[#bulletCache]
        table.remove(bulletCache, #bulletCache)

        if (bulletPart:IsA("Part") and ClientFPS &lt; USE_PART_FPS) or (bulletPart:IsA("CylinderHandleAdornment") and ClientFPS >= USE_PART_FPS) then
            bulletPart:Destroy()

            return createBulletPart(false)
        else
            return bulletPart
        end
    end
end

local function returnBulletPart(bulletPart: Part | CylinderHandleAdornment)
    if (bulletPart:IsA("Part") and ClientFPS &lt; USE_PART_FPS) or (bulletPart:IsA("CylinderHandleAdornment") and ClientFPS >= USE_PART_FPS) then
        bulletPart:Destroy()
        createBulletPart(true)
    else
        table.insert(bulletCache, bulletPart)
        local bulletPart = bulletPart :: Instance
        bulletPart.Parent = nil
    end
end

type BulletDrawProps = {
    BulletColor: Color3,
    BulletThickness: number,
    AdornPart: Part?,
    BulletPart: (Part | CylinderHandleAdornment)?
}

local BulletDraw = {}
BulletDraw.__index = BulletDraw

export type BulletDraw = typeof(setmetatable({} :: BulletDrawProps, BulletDraw))

function BulletDraw.new(bulletColor: Color3, bulletThickness: number)
    local self = setmetatable({} :: BulletDrawProps, BulletDraw)
    
    self.BulletColor = bulletColor
    self.BulletThickness = bulletThickness

    self.AdornPart = nil
    self.BulletPart = nil :: (Part | CylinderHandleAdornment)?

    self:_makeAdornPart()
    self:_updateBulletProps()
    
    return self
end

function BulletDraw.Draw(self: BulletDraw, pos0: Vector3, pos1: Vector3)
    if not self.BulletPart then return end
    if not self.AdornPart then return end

    if self.BulletPart.Parent ~= workspace then
		if self.BulletPart:IsA("Part") then
			self.BulletPart.Parent = workspace
		elseif self.BulletPart:IsA("CylinderHandleAdornment") then
            self.BulletPart.Parent = workspace
        else
            warn('neither')
        end
    end

    local diff = pos0 - pos1
    
    if self.BulletPart:IsA("Part") then
        self.BulletPart.Size = Vector3.new(self.BulletThickness, self.BulletThickness, diff.Magnitude)
        self.BulletPart.CFrame = CFrame.lookAt(pos0, pos1) * CFrame.new(0,0, -diff.Magnitude * .5)
    elseif self.BulletPart:IsA("CylinderHandleAdornment") then
        self.BulletPart.Height = diff.Magnitude
        self.BulletPart.CFrame = self.AdornPart.CFrame:Inverse() :: CFrame * (CFrame.lookAt(pos0, pos1) * CFrame.new(0,0, -diff.Magnitude * .5))
    end
end

function BulletDraw.Destroy(self: BulletDraw)
    if not self.BulletPart then return end
    returnBulletPart(self.BulletPart)

    self.BulletPart = nil
end


-- private methods

function BulletDraw._updateBulletProps(self: BulletDraw)
    if not self.BulletPart then
        self.BulletPart = getBulletPart()

        assert(self.BulletPart, "Didn't getBulletPart()")
    end
    
    if self.BulletPart and self.BulletPart:IsA("Part") then
        self.BulletPart.Color = self.BulletColor
    elseif self.BulletPart and self.BulletPart:IsA("CylinderHandleAdornment") then
        if not self.AdornPart then return end

        self.BulletPart.Color3 = self.BulletColor
        self.BulletPart.Radius = self.BulletThickness * .5
        self.BulletPart.Adornee = self.AdornPart
    end
end

function BulletDraw:_makeAdornPart()
    local adornPart = workspace:FindFirstChild("AdornPart")

    if not adornPart then
        adornPart = Instance.new("Part")
        adornPart.Name = "AdornPart"
        adornPart.Anchored = true
        adornPart.Size = Vector3.new(.001, .001, .001)
        adornPart.Transparency = 1
        adornPart.CanCollide = false
        adornPart.CanTouch = false
        adornPart.CanQuery = false
        adornPart.CFrame = CFrame.new(0, workspace.FallenPartsDestroyHeight + 55, 0)
        adornPart.Parent = workspace
    end

    self.AdornPart = adornPart
end

return BulletDraw</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="3">
        <Properties>
          <string name="Name">kinematic</string>
          <string name="Source">--!strict
local function kinematic(initialVelocity: Vector3, acceleration: Vector3, time: number): Vector3
    local vi = initialVelocity
    local a = acceleration
    local t = time

    return vi * t + .5 * a * math.pow(t, 2)
end

return kinematic</string>
        </Properties>
      </Item>
    </Item>
    <Item class="ModuleScript" referent="4">
      <Properties>
        <string name="Name">Signal</string>
        <string name="Source"><![CDATA[--!strict

-- closure scoping reimplement of https://github.com/LPGhatguy/lemur/blob/master/lib/Signal.lua
-- does not defer events

type SignalConnection = {
	Disconnect: (self: SignalConnection) -> ()
}

export type Signal<T...> = {
	Fire: (self: Signal<T...>, T...) -> (),
	Destroy: (self: Signal<T...>) -> (),
	Connect: (self: Signal<T...>, callback: (T...) -> ()) -> (SignalConnection)
}

local Signal = {}

local function listInsert(list, callback)
	local newList = {}
	local listLen = #list
		
	for i = 1, listLen do
		newList[i] = list[i]
	end

	table.insert(newList, callback)
		
	return newList
end
	
local function listValueRemove(list, value)
	local newList = {}

	for i = 1, #list do
		if list[i] ~= value then
			table.insert(newList, list[i])
		end
	end
		
	return newList
end

function Signal.new<T...>(): Signal<T...>
	local signal = {} :: Signal<T...>
	
	local boundCallbacks = {}
	
	function signal:Connect(callback: (T...) -> ()): SignalConnection

		boundCallbacks = listInsert(boundCallbacks, callback)

		local SignalConnection = {} :: SignalConnection

        function SignalConnection.Disconnect()
            boundCallbacks = listValueRemove(boundCallbacks, callback)
        end
		
		return SignalConnection
	end
	
	function signal:Fire(...: T...)

		for _, callback in ipairs(boundCallbacks) do
			task.spawn(callback, ...)
		end
	end
	
	function signal:Destroy()
		boundCallbacks = {}
	end

	return signal
end

return Signal
]]></string>
      </Properties>
    </Item>
  </Item>
</roblox>