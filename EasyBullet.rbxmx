<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="ModuleScript" referent="RBX9F6C037C265C424D966A28F2A14BC00C">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">EasyBullet</string>
			<string name="ScriptGuid">{3934DA7F-8D1C-4A16-8773-4282A819C493}</string>
			<ProtectedString name="Source"><![CDATA[--!strict

-- COPYRIGHT 2023 Zach Curtis
-- Distrubted under the MIT License
-- VERSION 0.3.3

local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local Bullet = require(script:WaitForChild("Bullet"))
local Signal = require(script:WaitForChild("Signal"))

export type ShouldFireCallback = (shooter: Player?, barrelPosition: Vector3, velocity: Vector3, ping: number, easyBulletSettings: Bullet.EasyBulletSettings?) -> boolean

type EasyBulletProps = {
	EasyBulletSettings: Bullet.EasyBulletSettings,

	BulletHit: Signal.Signal<Player?, RaycastResult, Bullet.BulletData>,
	BulletHitHumanoid: Signal.Signal<Player?, RaycastResult, Humanoid, Bullet.BulletData>,
	BulletUpdated: Signal.Signal<Vector3, Vector3, Bullet.BulletData>,

	Bullets: {[string]: Bullet.Bullet},
	HitConnections: {[string]: Signal.SignalConnection},
	BelowFallenPartsConnections: {[string]: Signal.SignalConnection},

	FiredRemote: RemoteEvent?,
	CanceledRemote: RemoteEvent?,

	CustomCastCallback: Bullet.CastCallback?, --(Player?, Vector3, Vector3, number, Bullet.BulletData) -> ()?,
	ShouldFireCallback: ShouldFireCallback?
}

type EasyBulletMethods = {
	FireBullet: (self: EasyBullet, barrelPosition: Vector3, bulletVelocity: Vector3, easyBulletSettings: Bullet.EasyBulletSettings?) -> (),
	BindCustomCast: (self: EasyBullet, callback: Bullet.CastCallback) -> (),
	BindShouldFire: (self: EasyBullet, callback: ShouldFireCallback) -> (),
	_fireBullet: (self: EasyBullet, shootingPlayer: Player?, barrelPos: Vector3, velocity: Vector3, ping: number, easyBulletSettings: Bullet.EasyBulletSettings?) -> (),
	_bindEvents: () -> (),
}

local function optionalTableMerge(optionalTable: Bullet.EasyBulletSettings, nonOptionalTable: Bullet.EasyBulletSettings): Bullet.EasyBulletSettings
	for key, value in pairs(nonOptionalTable) do
		if optionalTable[key] == nil then
			optionalTable[key] = value
		end
	end

	return optionalTable :: Bullet.EasyBulletSettings
end

local function overrideDefaults(newEasyBulletSettings: Bullet.EasyBulletSettings | {})
	local defaultSettings = {
		Gravity = true,
		RenderBullet = true,
		BulletColor = Color3.new(0.945098, 0.490196, 0.062745),
		BulletThickness = .1,
		FilterList = {},
		FilterType = Enum.RaycastFilterType.Exclude,
		BulletPartProps = {},
		BulletData = {}
	}

	for key, value in pairs(newEasyBulletSettings) do
		if defaultSettings[key] == nil then
			warn(`{key} does not exist in type EasyBulletSettings`)
			continue
		end

		if key == "BulletData" then
			for dataKey, _ in pairs(value) do
				assert(dataKey ~= "HitVelocity", `Cannot use key "HitVelocity" in provided BulletData table. "HitVelocity" is a reserved key string used by EasyBullet`)
				assert(dataKey ~= "BulletId", `Cannot use key "BulletId" in provided BulletData table. "BulletId" is a reserved key string used by EasyBullet`)
			end
		end

		defaultSettings[key] = value
	end

	return defaultSettings
end

local constructedEasyBullet

local EasyBullet = {}
EasyBullet.__index = EasyBullet

export type EasyBullet = typeof(setmetatable({} :: EasyBulletProps,  EasyBullet))

function EasyBullet.new(easyBulletSettings: Bullet.EasyBulletSettings?)
	if constructedEasyBullet then
		return constructedEasyBullet
	end

	local self = setmetatable({} :: EasyBulletProps, EasyBullet)

	self.EasyBulletSettings = overrideDefaults(easyBulletSettings or {})

	self.BulletHit = Signal.new()
	self.BulletHitHumanoid = Signal.new()
	self.BulletUpdated = Signal.new()

	self.Bullets = {} :: {[string]: Bullet.Bullet}
	self.HitConnections = {} :: {[string]: Signal.SignalConnection}
	self.BelowFallenPartsConnections = {} :: {[string]: Signal.SignalConnection}

	self.FiredRemote = nil
	self.CanceledRemote = nil

	self.CustomCastCallback = nil
	self.ShouldFireCallback = nil

	self:_bindEvents()

	constructedEasyBullet = self

	return self
end

function EasyBullet:FireBullet(barrelPosition: Vector3, bulletVelocity: Vector3, easyBulletSettings: Bullet.EasyBulletSettings?)
	assert(barrelPosition, `EasyBullet:FireBullet requires 2 parameters: a Vector3 position to start the bullet from, and a Velocity Vector3 of the direction to fire the bullet, with a magnitude of the initial velocity`)
	assert(bulletVelocity, `EasyBullet:FireBullet requires 2 parameters: a Vector3 position to start the bullet from, and a Velocity Vector3 of the direction to fire the bullet, with a magnitude of the initial velocity`)
	
	assert(typeof(barrelPosition) == "Vector3", "The first parameter to EasyBullet:FireBullet must be a Vector3")
	assert(typeof(bulletVelocity) == "Vector3", "The second parameter to EasyBullet:FireBullet must be a Vector3")

	local thisEasyBulletSettings = optionalTableMerge(easyBulletSettings or {} :: Bullet.EasyBulletSettings, self.EasyBulletSettings)

	-- Create a UUID linked to this bullet so it can be referenced over the network later
	local bulletId = HttpService:GenerateGUID()

	thisEasyBulletSettings.BulletData.BulletId = bulletId

	-- Server; only used for non player bullets.
	if RunService:IsServer() then
		for _, v in ipairs(Players:GetPlayers()) do
			local thisPing = v:GetNetworkPing()
			self.FiredRemote:FireClient(v, nil, barrelPosition, bulletVelocity, thisPing, thisEasyBulletSettings)
		end

		self:_fireBullet(nil, barrelPosition, bulletVelocity, 0, thisEasyBulletSettings)
	
	-- Client
	elseif RunService:IsClient() then
		if not self.FiredRemote then
			warn("EasyBullet Remote Event doesn't exist. Did you forget to call EasyBullet.new() on the server?")
			return
		end

		self.FiredRemote:FireServer(barrelPosition, bulletVelocity, thisEasyBulletSettings)

		self:_fireBullet(Players.LocalPlayer, barrelPosition, bulletVelocity, 0, thisEasyBulletSettings)
	end
end

function EasyBullet:BindCustomCast(callback: Bullet.CastCallback)
	assert(typeof(callback) == "function", `The callback passed to EasyBullet:BindCustomCast must be a function. Passed type is {typeof(callback)}`)

	self.CustomCastCallback = callback
end

function EasyBullet:BindShouldFire(callback: ShouldFireCallback)
	assert(typeof(callback) == "function", `The callback passed to EasyBullet:BindShouldFire must be a function. Passed type is {typeof(callback)}`)

	self.ShouldFireCallback = callback
end

function EasyBullet:_destroyBullet(bulletToDestroy: Bullet.Bullet | string)
	local bulletId: string
	local bullet: Bullet.Bullet

	if type(bulletToDestroy) == "string" then
		bulletId = bulletToDestroy
		bullet = self.Bullets[bulletId]
	else
		local tryBulletId = bulletToDestroy.EasyBulletSettings.BulletData.BulletId
		assert(type(tryBulletId) == "string", "Cannot destroy bullet as EasyBullet did not assign a BulletId for this bullet.")
		
		bulletId = tryBulletId
		bullet = bulletToDestroy
	end

	self.Bullets[bulletId] = nil

	if self.HitConnections[bulletId] ~= nil then
		self.HitConnections[bulletId].Disconnect()

		self.HitConnections[bulletId] = nil
	end

	if self.BelowFallenPartsConnections[bulletId] ~= nil then
		self.BelowFallenPartsConnections[bulletId].Disconnect()

		self.BelowFallenPartsConnections[bulletId] = nil
	end

	-- Obscure bug most likely caused by external library caused this to nil member error
	if bullet then
		bullet:Destroy()
	end
end

function EasyBullet._fireBullet(self: EasyBullet, shootingPlayer: Player?, barrelPos: Vector3, velocity: Vector3, ping: number, easyBulletSettings: Bullet.EasyBulletSettings)

	local bulletId = easyBulletSettings.BulletData.BulletId
	assert(type(bulletId) == "string", "EasyBullet did not assign a BulletId for this bullet.")
	
	-- Let users filter bullets being fired
	if self.ShouldFireCallback then
		local shouldFire = self.ShouldFireCallback(shootingPlayer, barrelPos, velocity, ping, easyBulletSettings)
		
		assert(type(shouldFire) == "boolean", `The callback bound by EasyBullet:BindShouldFire must return a boolean, shouldFireCallback returned: {typeof(shouldFire)}`)
		
		if shouldFire == false then
			
			assert(self.CanceledRemote ~= nil, "self.CanceledRemote does not reference ReplicatedStorage.EasyBulletCanceled")

			if RunService:IsServer() then
				self.CanceledRemote:FireAllClients(bulletId)
			elseif RunService:IsClient() then
				self.CanceledRemote:FireServer(bulletId)
			end

			return
		end
	end

	local bullet = Bullet.new(shootingPlayer, barrelPos, velocity, easyBulletSettings)

	self.HitConnections[bulletId] = bullet.BulletHit:Connect(function(rayResult: RaycastResult, hitHumanoid: Humanoid | boolean)
		self.BulletHit:Fire(shootingPlayer, rayResult, easyBulletSettings.BulletData)

		if type(hitHumanoid) ~= "boolean" then
			self.BulletHitHumanoid:Fire(shootingPlayer, rayResult, hitHumanoid, easyBulletSettings.BulletData)
		end

		self:_destroyBullet(bullet)
	end)

	self.BelowFallenPartsConnections[bulletId] = bullet.BelowFallenParts:Connect(function()
		self:_destroyBullet(bullet)
	end)

	bullet:Start(ping)

	self.Bullets[bulletId] = bullet
end

function EasyBullet:_bindEvents()
	-- Server
	if RunService:IsServer() then

		-- Look for existing EasyBulletFired RemoteEvent. Create one if it does not exist.
		self.FiredRemote = self:_findOrCreateRemote("EasyBulletFired")
		assert(self.FiredRemote ~= nil, "self.FiredRemote cannot be nil.")

		self.FiredRemote.OnServerEvent:Connect(function(player: Player, barrelPos: Vector3, velocity: Vector3, easyBulletSettings: Bullet.EasyBulletSettings)
			-- Sanity check params
			if typeof(barrelPos) ~= "Vector3" then
				warn(`{player.Name} passed a malformed barrelPosition type to EasyBulletFired RemoteEvent\nExpected: Vector3, got: {typeof(barrelPos)}`)
				return
			end

			if typeof(velocity) ~= "Vector3" then
				warn(`{player.Name} passed a malformed velocity type to EasyBulletFired RemoteEvent\nExpected: Vector3, got: {typeof(velocity)}`)
				return
			end

			-- Use shooter's ping to account for network desync.
			local ping = player:GetNetworkPing()

			-- Replicate shot to all other clients
			for _, v in ipairs(Players:GetPlayers()) do
				if v == player then continue end
				
				local thisPing = v:GetNetworkPing()

				self.FiredRemote:FireClient(v, player, barrelPos, velocity, ping + thisPing, easyBulletSettings)
			end

			-- Start handling the shot on the server
			self:_fireBullet(player, barrelPos, velocity, ping, easyBulletSettings)
		end)

		-- Look for existing EasyBulletCanceled RemoteEvent. Create one if it does not exist.
		self.CanceledRemote = self:_findOrCreateRemote("EasyBulletCanceled")
		assert(self.CanceledRemote ~= nil, "self.CanceledRemote cannot be nil.")

		-- Handle the CanceledRemote
		self.CanceledRemote.OnServerEvent:Connect(function(cancelingPlayer: Player, bulletId: string)
			local bullet = self.Bullets[bulletId]

			if not bullet then
				warn(`No Bullet with a BulletId of {bulletId} was found`)
				return
			end

			if not bullet.Shooter then
				warn(`{cancelingPlayer.Name} cannot cancel a bullet owned by the server. BulletId: {bulletId}`)
				return
			end

			if bullet.Shooter and bullet.Shooter ~= cancelingPlayer then
				warn(`{cancelingPlayer.Name} cannot cancel a bullet owned by {bullet.Shooter.Name}. BulletId: {bulletId}`)
				return
			end

			self:_destroyBullet(bulletId)
		end)


	-- Client
	elseif RunService:IsClient() then
		-- Make references to our remotes
		self.FiredRemote = ReplicatedStorage:WaitForChild("EasyBulletFired") :: RemoteEvent
		self.CanceledRemote = ReplicatedStorage:WaitForChild(("EasyBulletCanceled")) :: RemoteEvent

		if not self.FiredRemote then
			warn("No RemoteEvent named 'EasyBulletFired' found as a child of ReplicatedStorage")
			return
		end

		if not self.CanceledRemote then
			warn("No RemoteEvent named 'EasyBulletCanceled' found as a child of ReplicatedStorage")
			return
		end
		
		-- Handle the FiredRemote
		self.FiredRemote.OnClientEvent:Connect(function(shootingPlayer: Player, barrelPos: Vector3, velocity: Vector3, accumulatedPing: number, easyBulletSettings: Bullet.EasyBulletSettings)
			-- The server shouldn't ever replicate back a shot this client fired, but check that just to be safe.
			if shootingPlayer == Players.LocalPlayer then
				return
			end
			
			self:_fireBullet(shootingPlayer, barrelPos, velocity, accumulatedPing, easyBulletSettings)
		end)

		-- Handle the CanceledRemote
		self.CanceledRemote.OnClientEvent:Connect(function(bulletId: string)
			self:_destroyBullet(bulletId)
		end)

	end

	-- Both
	RunService.Heartbeat:Connect(function()
		for _, bullet: Bullet.Bullet in pairs(self.Bullets) do
			local lastPosition, currentPosition = bullet:Update(self.CustomCastCallback)

			-- Update returns nil when bullet drops below workspace.FallenPartsDestroyHeight
			if lastPosition and currentPosition then
				self.BulletUpdated:Fire(lastPosition, currentPosition, bullet.EasyBulletSettings.BulletData)
			end
		end
	end)
end

function EasyBullet:_findOrCreateRemote(remoteName: string): RemoteEvent
	local foundRemote = ReplicatedStorage:FindFirstChild(remoteName)

	if foundRemote == nil then
		foundRemote = Instance.new("RemoteEvent")
		foundRemote.Name = remoteName
		foundRemote.Parent = ReplicatedStorage

		return foundRemote
	elseif foundRemote:IsA("RemoteEvent") then
		return foundRemote
	else
		error(`Instance named {remoteName} is of type {foundRemote.ClassName}, not RemoteEvent`)
	end
end

return EasyBullet]]></ProtectedString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBX786AC15C98374951903FAE9746CF1641">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Bullet</string>
				<string name="ScriptGuid">{256B6C52-5281-44A8-B063-135B311B9885}</string>
				<ProtectedString name="Source"><![CDATA[--!strict

-- COPYRIGHT 2023 Zach Curtis
-- Distrubted under the MIT License

local RunService = game:GetService("RunService")

local KinematicEquations = require(script:WaitForChild("KinematicEquations"))
local BulletDraw = require(script:WaitForChild("BulletDraw"))
local Signal = require(script.Parent:WaitForChild("Signal"))

type BulletDataKey = "HitVelocity" | "BulletId"

export type BulletData = {[BulletDataKey | string]: unknown}

export type CastCallback = (shooter: Player?, pos0: Vector3, pos1: Vector3, elapsedTime: number, BulletData) -> RaycastResult?

export type EasyBulletSettings = {
	Gravity: boolean,
	RenderBullet: boolean,
	BulletColor: Color3,
	BulletThickness: number,
	FilterList: {[number]: Instance},
	FilterType: Enum.RaycastFilterType,
    BulletPartProps: {[string]: unknown},
    BulletData: BulletData
}

type BulletProps = {
    Shooter: Player?,
    BarrelPosition: Vector3,
    Velocity: Vector3,
    EasyBulletSettings: EasyBulletSettings,
    RayParams: RaycastParams,
    BulletHit: Signal.Signal<RaycastResult, boolean | Humanoid, BulletData>,
    BelowFallenParts: Signal.Signal<nil>,
    StartTime: number,
    _bulletDraw: BulletDraw.BulletDraw?,
    _lastPosition: Vector3,
}

local function raycast(v0: Vector3, v1: Vector3, rayparams: RaycastParams)
    local diff = v1 - v0

    return workspace:Raycast(v0, diff, rayparams)
end

local function recursiveHumanoidCheck(instance: Instance): boolean | Humanoid
    local parentModel = instance:FindFirstAncestorOfClass("Model")

    if (not parentModel) or parentModel:IsA("WorldRoot") then
        return false
    end

    local childHumanoid = parentModel:FindFirstChildOfClass("Humanoid")

    if childHumanoid then
        return childHumanoid
    else
        return recursiveHumanoidCheck(parentModel)
    end
end

local Bullet = {}
Bullet.__index = Bullet

export type Bullet = typeof(setmetatable({} :: BulletProps, Bullet))


function Bullet.new(shootingPlayer: Player?, barrelPosition: Vector3, velocity: Vector3, easyBulletSettings: EasyBulletSettings)
    local self = setmetatable({} :: BulletProps, Bullet)

    self.Shooter = shootingPlayer
    
    self.BarrelPosition = barrelPosition
    self.Velocity = velocity
    self.EasyBulletSettings = easyBulletSettings

    self.RayParams = RaycastParams.new()
    self.RayParams.FilterDescendantsInstances = easyBulletSettings.FilterList or {}
    self.RayParams.FilterType = easyBulletSettings.FilterType or Enum.RaycastFilterType.Exclude
    
    if RunService:IsClient() and easyBulletSettings.RenderBullet then
        self._bulletDraw = BulletDraw.new(easyBulletSettings.BulletColor, easyBulletSettings.BulletThickness, self.EasyBulletSettings.BulletPartProps)
    end
    
    self._lastPosition = barrelPosition
    self.StartTime = 0

    self.BulletHit = Signal.new()
    self.BelowFallenParts = Signal.new()

    return self
end

function Bullet.Start(self: Bullet, ping: number?)
    self.StartTime = os.clock()

    if ping then 
        self.StartTime -= ping
    end
end

function Bullet.Update(self: Bullet, castCallback: CastCallback?): (Vector3?, Vector3?)
    local lastPosition = self._lastPosition
    local currentPosition, elapsedTime = self:_getCurrentPositionAndLifetime()

    if currentPosition.Y <= workspace.FallenPartsDestroyHeight then
        self.BelowFallenParts:Fire()
        return
    end

    local rayResult

    if castCallback then
        rayResult = castCallback(self.Shooter, lastPosition, currentPosition, elapsedTime, self.EasyBulletSettings.BulletData)
    else
        rayResult = raycast(lastPosition, currentPosition, self.RayParams)
    end
    
    self:_handleRayResult(rayResult)

    if self._bulletDraw then
        self._bulletDraw:Draw(lastPosition, currentPosition)
    end

    self._lastPosition = currentPosition

    return lastPosition, currentPosition
end

function Bullet.Destroy(self: Bullet)
    if self._bulletDraw then
        self._bulletDraw:Destroy()
        self._bulletDraw = nil
    end

    self.BulletHit:Destroy()
    self.BelowFallenParts:Destroy()
end

function Bullet:_getElapsedTime(): number
    local currentTime = os.clock()

    return currentTime - self.StartTime
end

function Bullet:_getAcceleration(): Vector3
    return self.EasyBulletSettings.Gravity and Vector3.new(0, -workspace.Gravity, 0) or Vector3.zero
end

function Bullet._getCurrentPositionAndLifetime(self: Bullet): (Vector3, number)
    local elapsedTime = self:_getElapsedTime()
    local acceleration = self:_getAcceleration()

    local currentDisplacement = KinematicEquations:GetDisplacementFromTime(self.Velocity, acceleration, elapsedTime)
    local currentPosition = self.BarrelPosition + currentDisplacement

    return currentPosition, elapsedTime
end

function Bullet:_handleRayResult(raycastResult: RaycastResult?)
    if not raycastResult then return end

    local elapsedTime = self:_getElapsedTime()
    local acceleration = self:_getAcceleration()

    local hitVelocity = KinematicEquations:GetFinalVelocityFromTime(self.Velocity, acceleration, elapsedTime)

    local bulletData = self.EasyBulletSettings.BulletData
    
    bulletData.HitVelocity = hitVelocity

    local hitHumanoid = recursiveHumanoidCheck(raycastResult.Instance)

    self.BulletHit:Fire(raycastResult, hitHumanoid, bulletData)
end


return Bullet]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX15D3BB0ABB97495CB6B9076CF00E58C5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">BulletDraw</string>
					<string name="ScriptGuid">{4E2ACBA8-663D-4F08-9BD3-D77E75753D1F}</string>
					<ProtectedString name="Source"><![CDATA[--!strict

-- COPYRIGHT 2023 Zach Curtis
-- Distrubted under the MIT License

local USE_PART_FPS = 45 -- will use a part for bullets above this fps

local RunService = game:GetService("RunService")

local ClientFPS = 1/RunService.Heartbeat:Wait()

if RunService:IsClient() then
    RunService.Heartbeat:Connect(function(dt)
        ClientFPS = 1 / dt 
    end)
end

local bulletCache: {[number]: Part | CylinderHandleAdornment} = {}

local function createBulletPart(addToCache: boolean): (Part | CylinderHandleAdornment)?
    local newBulletInstance: Part | CylinderHandleAdornment

    if RunService:IsClient() then
        if ClientFPS >= USE_PART_FPS then
            newBulletInstance = Instance.new("Part") :: Part

            if not newBulletInstance:IsA("Part") then return end
            
            newBulletInstance.Anchored = true
            newBulletInstance.CanCollide = false
            newBulletInstance.CanTouch = false
            newBulletInstance.CanQuery = false
            newBulletInstance.Material = Enum.Material.Neon
        else
            newBulletInstance = Instance.new("CylinderHandleAdornment")
        end
    else
        newBulletInstance = Instance.new("CylinderHandleAdornment")
    end

    if addToCache then
        table.insert(bulletCache, newBulletInstance)
    end

    return newBulletInstance
end

for _ = 1, 20 do
    createBulletPart(true)
end

local function getBulletPart(): Part | CylinderHandleAdornment | nil
    if #bulletCache == 0 then
        return createBulletPart(false)
    else
        local bulletPart = bulletCache[#bulletCache]
        table.remove(bulletCache, #bulletCache)

        if (bulletPart:IsA("Part") and ClientFPS < USE_PART_FPS) or (bulletPart:IsA("CylinderHandleAdornment") and ClientFPS >= USE_PART_FPS) then
            bulletPart:Destroy()

            return createBulletPart(false)
        else
            return bulletPart
        end
    end
end

local function returnBulletPart(bulletPart: Part | CylinderHandleAdornment)
    if (bulletPart:IsA("Part") and ClientFPS < USE_PART_FPS) or (bulletPart:IsA("CylinderHandleAdornment") and ClientFPS >= USE_PART_FPS) then
        bulletPart:Destroy()
        createBulletPart(true)
    else
        table.insert(bulletCache, bulletPart)
        local bulletPart = bulletPart :: Instance
        bulletPart.Parent = nil
    end
end

type BulletDrawProps = {
    BulletColor: Color3,
    BulletThickness: number,
    BulletPartProps: {[string]: unknown},
    AdornPart: Part,
    BulletPart: (Part | CylinderHandleAdornment)?
}

local BulletDraw = {}
BulletDraw.__index = BulletDraw

export type BulletDraw = typeof(setmetatable({} :: BulletDrawProps, BulletDraw))

function BulletDraw.new(bulletColor: Color3, bulletThickness: number, bulletPartProps: {[string]: unknown})
    local self = setmetatable({} :: BulletDrawProps, BulletDraw)
    
    self.BulletColor = bulletColor
    self.BulletThickness = bulletThickness
    self.BulletPartProps = bulletPartProps or {}

    self.AdornPart = self:_makeAdornPart()
    self.BulletPart = nil :: (Part | CylinderHandleAdornment)?

    self:_updateBulletProps()
    
    return self
end

function BulletDraw.Draw(self: BulletDraw, pos0: Vector3, pos1: Vector3)
    if not self.BulletPart then return end

    if self.BulletPart.Parent ~= workspace then
		if self.BulletPart:IsA("Part") then
			self.BulletPart.Parent = workspace
		elseif self.BulletPart:IsA("CylinderHandleAdornment") then
            self.BulletPart.Parent = workspace
        else
            warn('neither')
        end
    end

    local diff = pos0 - pos1
    
    if self.BulletPart:IsA("Part") then
        self.BulletPart.Size = Vector3.new(self.BulletThickness, self.BulletThickness, diff.Magnitude)
        self.BulletPart.CFrame = CFrame.lookAt(pos0, pos1) * CFrame.new(0,0, -diff.Magnitude * .5)
    elseif self.BulletPart:IsA("CylinderHandleAdornment") then
        self.BulletPart.Height = diff.Magnitude
        self.BulletPart.CFrame = self.AdornPart.CFrame:Inverse() :: CFrame * (CFrame.lookAt(pos0, pos1) * CFrame.new(0,0, -diff.Magnitude * .5))
    end
end

function BulletDraw.Destroy(self: BulletDraw)
    if not self.BulletPart then return end
    returnBulletPart(self.BulletPart)

    self.BulletPart = nil
end


-- private methods

function BulletDraw._updateBulletProps(self: BulletDraw)
    if not self.BulletPart then
        self.BulletPart = getBulletPart()

        assert(self.BulletPart, "Didn't getBulletPart()")
    end
    
    if self.BulletPart and self.BulletPart:IsA("Part") then
        self.BulletPart.Color = self.BulletColor

        for key, value in pairs(self.BulletPartProps) do
            if key == "CFrame" or key == "Size" then
                warn(`Cannot include {key} in BulletPartProps as it is calculated internally`)
                continue
            elseif key == "Color" then
                warn(`Cannot set Color from BulletPartProps. Use EasyBulletSettings.BulletColor instead`)
                continue
            end
            
            if self.BulletPart[key] then
                self.BulletPart[key] = value
            end
        end
    elseif self.BulletPart and self.BulletPart:IsA("CylinderHandleAdornment") then
        if not self.AdornPart then return end

        self.BulletPart.Color3 = self.BulletColor
        self.BulletPart.Radius = self.BulletThickness * .5
        self.BulletPart.Adornee = self.AdornPart
    end
end

function BulletDraw:_makeAdornPart()
    local adornPart = workspace:FindFirstChild("AdornPart")

    if not adornPart then
        adornPart = Instance.new("Part")
        adornPart.Name = "AdornPart"
        adornPart.Anchored = true
        adornPart.Size = Vector3.new(.001, .001, .001)
        adornPart.Transparency = 1
        adornPart.CanCollide = false
        adornPart.CanTouch = false
        adornPart.CanQuery = false
        adornPart.CFrame = CFrame.new(0, workspace.FallenPartsDestroyHeight + 55, 0)
        adornPart.Parent = workspace
    end

    return adornPart
end

return BulletDraw]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX0B07A92BB0F14A22834328AFE9DCACE4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">KinematicEquations</string>
					<string name="ScriptGuid">{AB62255F-DCC5-4CDF-9445-526665C3C9DD}</string>
					<ProtectedString name="Source"><![CDATA[--!strict

-- COPYRIGHT 2023 Zach Curtis
-- Distrubted under the MIT License

local KinematicEquations = {}

function KinematicEquations:GetDisplacementFromTime(initialVelocity: Vector3, acceleration: Vector3, time: number): Vector3
    local vi = initialVelocity
    local a = acceleration
    local t = time

    return vi * t + .5 * a * math.pow(t, 2)
end

function KinematicEquations:GetDisplacementFromFinalVelocity(initialVelocity: Vector3, finalVelocity: Vector3, time: number): Vector3
    local vi = initialVelocity
    local vf = finalVelocity
    local t = time

    return ((vi + vf) / 2) * t
end

function KinematicEquations:GetFinalVelocityFromTime(initialVelocity: Vector3, acceleration: Vector3, time: number): Vector3
    local vi = initialVelocity
    local a = acceleration
    local t = time

    return vi + a * t
end

function KinematicEquations:GetFinalVelocityFromDisplacement(initialVelocity: Vector3, acceleration: Vector3, displacement: Vector3): Vector3
    local vi = initialVelocity
    local a = acceleration
    local d = displacement

    local squaredVF = Vector3.new(vi.X^2, vi.Y^2, vi.Z^2) + 2 * a * d

    return Vector3.new(math.sqrt(squaredVF.X), math.sqrt(squaredVF.Y), math.sqrt(squaredVF.Z))
end

return KinematicEquations]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX126A32E3798C400CACEF6F993E867B34">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Signal</string>
				<string name="ScriptGuid">{9BDB47CF-34D2-4DEA-947C-BB40B26D35DE}</string>
				<ProtectedString name="Source"><![CDATA[--!strict

-- closure scoping reimplement of https://github.com/LPGhatguy/lemur/blob/master/lib/Signal.lua
-- does not defer events

export type SignalConnection = {
	Disconnect: (self: SignalConnection) -> ()
}

export type Signal<T...> = {
	Fire: (self: Signal<T...>, T...) -> (),
	Destroy: (self: Signal<T...>) -> (),
	Connect: (self: Signal<T...>, callback: (T...) -> ()) -> (SignalConnection)
}

local Signal = {}

local function listInsert(list, callback)
	local newList = {}
	local listLen = #list
		
	for i = 1, listLen do
		newList[i] = list[i]
	end

	table.insert(newList, callback)
		
	return newList
end
	
local function listValueRemove(list, value)
	local newList = {}

	for i = 1, #list do
		if list[i] ~= value then
			table.insert(newList, list[i])
		end
	end
		
	return newList
end

function Signal.new<T...>(): Signal<T...>
	local signal = {} :: Signal<T...>
	
	local boundCallbacks = {}
	
	function signal:Connect(callback: (T...) -> ()): SignalConnection

		boundCallbacks = listInsert(boundCallbacks, callback)

		local SignalConnection = {} :: SignalConnection

        function SignalConnection.Disconnect()
            boundCallbacks = listValueRemove(boundCallbacks, callback)
        end
		
		return SignalConnection
	end
	
	function signal:Fire(...: T...)

		for _, callback in ipairs(boundCallbacks) do
			task.spawn(callback, ...)
		end
	end
	
	function signal:Destroy()
		boundCallbacks = {}
	end

	return signal
end

return Signal
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
</roblox>